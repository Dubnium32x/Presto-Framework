#!/usr/bin/env python3
"""
generate_heightmaps.py - Lightweight version for generating tile heightmaps
"""

import sys
import os
from PIL import Image
import math

def is_solid_pixel(px):
    """Check if pixel is solid based on alpha channel."""
    return px[3] > 16  # alpha threshold

def compute_heightmap(tile_img):
    """Compute height values for each column in a 16x16 tile."""
    w, h = tile_img.size
    assert w == 16 and h == 16
    pixels = tile_img.load()
    heights = []
    
    for x in range(16):
        col_height = 0
        # scan from bottom to top
        for y in range(15, -1, -1):
            if is_solid_pixel(pixels[x, y]):
                col_height += 1
            else:
                # once we hit transparent above, break to count only contiguous solid from bottom
                if col_height > 0:
                    break
        heights.append(col_height)
    return heights

def process_tileset(path):
    """Process a tileset image and extract heightmaps for all tiles."""
    print(f'Processing {path}')
    img = Image.open(path).convert('RGBA')
    tw, th = img.size
    tiles_x = tw // 16
    tiles_y = th // 16
    maps = []
    
    for ty in range(tiles_y):
        for tx in range(tiles_x):
            box = (tx*16, ty*16, tx*16+16, ty*16+16)
            tile = img.crop(box)
            heights = compute_heightmap(tile)
            maps.append(heights)
    
    print(f'Extracted {len(maps)} tiles from {os.path.basename(path)}')
    return maps

def write_c_files(header_path, source_path, tileset_name, heightmaps):
    """Write heightmap data as C header and source files."""
    
    # Write header file
    with open(header_path, 'w') as f:
        f.write('// Auto-generated heightmaps file\n')
        f.write('// Generated by tools/generate_heightmaps.py\n\n')
        f.write('#ifndef GENERATED_HEIGHTMAPS_H\n')
        f.write('#define GENERATED_HEIGHTMAPS_H\n\n')
        f.write('#include <stdint.h>\n\n')

        f.write(f'#define TILESET_TILE_COUNT {len(heightmaps)}\n')
        f.write('#define TILE_WIDTH 16\n\n')

        f.write('// Single tileset heightmaps: [tile][column]\n')
        f.write('extern const int TILESET_HEIGHTMAPS[][TILE_WIDTH];\n\n')
        
        f.write('// Tileset name\n')
        f.write('extern const char* TILESET_NAME;\n\n')
        
        f.write('#endif // GENERATED_HEIGHTMAPS_H\n')

    # Write source file  
    with open(source_path, 'w') as f:
        f.write('// Auto-generated heightmaps file\n')
        f.write('// Generated by tools/generate_heightmaps.py\n\n')
        f.write('#include "generated_heightmaps.h"\n\n')

        f.write(f'const char* TILESET_NAME = "{tileset_name}";\n\n')

        f.write('const int TILESET_HEIGHTMAPS[][TILE_WIDTH] = {\n')
        for i, heightmap in enumerate(heightmaps):
            f.write('    {' + ', '.join(f'{h:2d}' for h in heightmap) + '},')
            if i < 10 or i % 20 == 0:  # Add comments for first few and every 20th tile
                f.write(f' // Tile {i}')
            f.write('\n')
        f.write('};\n')

def main():
    if len(sys.argv) < 3:
        print("Usage: generate_heightmaps.py <tileset-file> <output-basename>")
        print("Example: generate_heightmaps.py res/sprite/spritesheet/tileset/SPGSolidTileHeightCollision.png src/world/generated_heightmaps")
        sys.exit(1)

    tileset_path = sys.argv[1]
    out_basename = sys.argv[2]
    
    if not os.path.exists(tileset_path):
        print(f"Error: Tileset file '{tileset_path}' does not exist")
        sys.exit(1)

    # Process the tileset
    tileset_name = os.path.splitext(os.path.basename(tileset_path))[0]
    heightmaps = process_tileset(tileset_path)

    # Write output files
    header_path = out_basename + '.h'
    source_path = out_basename + '.c'
    
    write_c_files(header_path, source_path, tileset_name, heightmaps)
    
    print(f"Generated {header_path} and {source_path}")
    print(f"Processed {len(heightmaps)} tiles from tileset '{tileset_name}'")

if __name__ == '__main__':
    main()